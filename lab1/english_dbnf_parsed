
# text = Who:<PRON> are:<AUX> they:<PRON> ?:<PUNCT>
# analyses = 3
# parsetree = (Utt (Utt (S (there Who) (be_V are) (NP (Pron they)))) (Punct '?'))
1	Who	_	PRON	_	_	2	expl	_	_
2	are	_	VERB	_	_	0	root	_	_
3	they	_	PRON	_	_	2	nsubj	_	_
4	?	_	PUNCT	_	_	2	punct	_	_



# text = A:<DET> small:<ADJ> town:<NOUN> with:<ADP> two:<NUM> minarets:<NOUN> glides:<VERB> by:<ADV> .:<PUNCT>
# analyses = 22
# parsetree = (Utt (Utt (S (NP (NP (Det A) (CN (AP (A small)) (CN (N town)))) (NP_obl (Prep with) (NP (Num (Card two)) (NP (CN (N minarets)))))) (VP (VP (V glides)) (Adv by)))) (Punct '.'))
1	A	_	DET	_	_	3	det	_	_
2	small	_	ADJ	_	_	3	amod	_	_
3	town	_	NOUN	_	_	7	nsubj	_	_
4	with	_	ADP	_	_	6	case	_	_
5	two	_	NUM	_	_	6	nummod	_	_
6	minarets	_	NOUN	_	_	3	nmod	_	_
7	glides	_	VERB	_	_	0	root	_	_
8	by	_	ADV	_	_	7	advmod	_	_
9	.	_	PUNCT	_	_	7	punct	_	_



# text = I:<PRON> was:<AUX> just:<ADV> a:<DET> boy:<NOUN> with:<ADP> muddy:<ADJ> shoes:<NOUN> .:<PUNCT>
# analyses = 24
# parsetree = (Utt (Utt (S (there I) (be_V was) (AdV just) (NP (NP (Det a) (CN (N boy))) (NP_obl (Prep with) (NP (CN (AP (A muddy)) (CN (N shoes)))))))) (Punct '.'))
1	I	_	PRON	_	_	2	expl	_	_
2	was	_	VERB	_	_	0	root	_	_
3	just	_	ADV	_	_	2	advmod	_	_
4	a	_	DET	_	_	5	det	_	_
5	boy	_	NOUN	_	_	2	nsubj	_	_
6	with	_	ADP	_	_	8	case	_	_
7	muddy	_	ADJ	_	_	8	amod	_	_
8	shoes	_	NOUN	_	_	5	nmod	_	_
9	.	_	PUNCT	_	_	2	punct	_	_



# text = Shenzhen:<ADV> 's:<PART> traffic:<NOUN> police:<NOUN> have:<AUX> opted:<VERB> for:<ADP> unconventional:<ADJ> penalties:<NOUN> before:<ADV> .:<PUNCT>
# analyses = 0
# parsetree = (Chunks (AdA Shenzhen) ('s' 's') (S_front (S (NP (NP (CN (N traffic))) (SC (S_that (S (NP (CN (N police))) (VP (aux have)))))) (VP (VP (V2 opted) (NP_obl (Prep for) (NP (CN (AP (A unconventional)) (CN (N penalties)))))) (Adv before))) (comma '.')))
1	Shenzhen	_	ADV	_	_	6	dep	_	_
2	's	_	PART	_	_	6	dep	_	_
3	traffic	_	NOUN	_	_	6	nsubj	_	_
4	police	_	NOUN	_	_	5	nsubj	_	_
5	have	_	AUX	_	_	3	acl	_	_
6	opted	_	VERB	_	_	0	root	_	_
7	for	_	ADP	_	_	9	case	_	_
8	unconventional	_	ADJ	_	_	9	amod	_	_
9	penalties	_	NOUN	_	_	6	obl	_	_
10	before	_	ADV	_	_	6	advmod	_	_
11	.	_	PUNCT	_	_	6	punct	_	_



# text = The:<DET> study:<NOUN> of:<ADP> volcanoes:<NOUN> is:<AUX> called:<VERB> volcanology:<ADV> ,:<PUNCT> sometimes:<ADV> spelled:<VERB> vulcanology:<ADV> .:<PUNCT>
# analyses = 13
# parsetree = (Utt (Utt (S (SC (S_that (S (NP (NP (Det The) (CN (N study))) (NP_obl (Prep of) (NP (CN (N volcanoes))))) (have is) (VP (VP (VP (V called)) (Adv volcanology)) (comma ',') (Adv sometimes))))) (VP (VP (V spelled)) (Adv vulcanology)))) (Punct '.'))
1	The	_	DET	_	_	2	det	_	_
2	study	_	NOUN	_	_	6	nsubj	_	_
3	of	_	ADP	_	_	4	case	_	_
4	volcanoes	_	NOUN	_	_	2	nmod	_	_
5	is	_	AUX	_	_	6	aux	_	_
6	called	_	VERB	_	_	10	csubj	_	_
7	volcanology	_	ADV	_	_	6	advmod	_	_
8	,	_	PUNCT	_	_	6	punct	_	_
9	sometimes	_	ADV	_	_	6	advmod	_	_
10	spelled	_	VERB	_	_	0	root	_	_
11	vulcanology	_	ADV	_	_	10	advmod	_	_
12	.	_	PUNCT	_	_	10	punct	_	_



# text = It:<PRON> was:<AUX> conducted:<VERB> just:<ADV> off:<ADP> the:<DET> Mexican:<ADJ> coast:<NOUN> from:<ADP> April:<PROPN> to:<ADP> June:<PROPN> .:<PUNCT>
# analyses = 35
# parsetree = (Utt (Utt (QS (IP It) (cop was) (VP_pass (VP_pass (VP_pass (V2 conducted)) (Adv just)) (NP_obl (Prep off) (NP (NP (Det the) (CN (AP (A Mexican)) (CN (N coast)))) (NP_obl (Prep from) (NP (NP (PN April)) (NP_obl (Prep to) (NP (PN June)))))))))) (Punct '.'))
1	It	_	PRON	_	_	3	nsubj:pass	_	_
2	was	_	AUX	_	_	3	aux:pass	_	_
3	conducted	_	VERB	_	_	0	root	_	_
4	just	_	ADV	_	_	3	advmod	_	_
5	off	_	ADP	_	_	8	case	_	_
6	the	_	DET	_	_	8	det	_	_
7	Mexican	_	ADJ	_	_	8	amod	_	_
8	coast	_	NOUN	_	_	3	nmod	_	_
9	from	_	ADP	_	_	10	case	_	_
10	April	_	PROPN	_	_	8	nmod	_	_
11	to	_	ADP	_	_	12	case	_	_
12	June	_	PROPN	_	_	10	nmod	_	_
13	.	_	PUNCT	_	_	3	punct	_	_



# text = ":<PUNCT> Her:<PRON> voice:<NOUN> literally:<ADV> went:<VERB> around:<ADP> the:<DET> world:<NOUN> ,:<PUNCT> ":<PUNCT> Leive:<PROPN> said:<VERB> .:<PUNCT>
# analyses = 3
# parsetree = (Utt (Utt (S (S_front (quote '"') (S (NP (NP_poss (Pron_poss Her)) (CN (N voice))) (VP (AdV literally) (VP (V2 went) (NP_obl (Prep around) (NP (Det the) (CN (N world))))))) (quote ',') (comma '"')) (NP (PN Leive)) (VS said))) (Punct '.'))
1	"	_	PUNCT	_	_	5	punct	_	_
2	Her	_	PRON	_	_	3	nmod:poss	_	_
3	voice	_	NOUN	_	_	5	nsubj	_	_
4	literally	_	ADV	_	_	5	advmod	_	_
5	went	_	VERB	_	_	12	parataxis	_	_
6	around	_	ADP	_	_	8	case	_	_
7	the	_	DET	_	_	8	det	_	_
8	world	_	NOUN	_	_	5	obl	_	_
9	,	_	PUNCT	_	_	5	punct	_	_
10	"	_	PUNCT	_	_	5	punct	_	_
11	Leive	_	PROPN	_	_	12	nsubj	_	_
12	said	_	VERB	_	_	0	root	_	_
13	.	_	PUNCT	_	_	12	punct	_	_



# text = A:<DET> witness:<NOUN> told:<VERB> police:<NOUN> that:<SCONJ> the:<DET> victim:<NOUN> had:<AUX> attacked:<VERB> the:<DET> suspect:<NOUN> in:<ADP> April:<PROPN> .:<PUNCT>
# analyses = 1909
# parsetree = (Utt (Utt (S (NP (Det A) (CN (N witness))) (VP (V2 told) (NP (NP (NP (CN (N police))) (S_sub (Subj that) (S (NP (Det the) (CN (N victim))) (have had) (VP (V2 attacked) (NP (Det the) (CN (N suspect))))))) (NP_obl (Prep in) (NP (PN April))))))) (Punct '.'))
1	A	_	DET	_	_	2	det	_	_
2	witness	_	NOUN	_	_	3	nsubj	_	_
3	told	_	VERB	_	_	0	root	_	_
4	police	_	NOUN	_	_	3	obj	_	_
5	that	_	SCONJ	_	_	9	mark	_	_
6	the	_	DET	_	_	7	det	_	_
7	victim	_	NOUN	_	_	9	nsubj	_	_
8	had	_	AUX	_	_	9	aux	_	_
9	attacked	_	VERB	_	_	4	acl	_	_
10	the	_	DET	_	_	11	det	_	_
11	suspect	_	NOUN	_	_	9	obj	_	_
12	in	_	ADP	_	_	13	case	_	_
13	April	_	PROPN	_	_	4	nmod	_	_
14	.	_	PUNCT	_	_	3	punct	_	_



# text = It:<PRON> 's:<VERB> most:<ADV> obvious:<ADV> when:<SCONJ> a:<DET> celebrity:<NOUN> 's:<PART> name:<NOUN> is:<AUX> initially:<ADV> quite:<ADV> rare:<ADJ> .:<PUNCT>
# analyses = 18
# parsetree = (Utt (Utt (S (S (NP (Pron It)) (VP (VP (VP (V 's')) (Adv most)) (Adv obvious))) (S_sub (Subj when) (S (NP (NP_poss (NP (Det a) (CN (N celebrity))) ('s' 's')) (CN (N name))) (cop is) (AdV initially) (neg quite) (Comp (AP (A rare))))))) (Punct '.'))
1	It	_	PRON	_	_	2	nsubj	_	_
2	's	_	VERB	_	_	0	root	_	_
3	most	_	ADV	_	_	2	advmod	_	_
4	obvious	_	ADV	_	_	2	advmod	_	_
5	when	_	SCONJ	_	_	13	mark	_	_
6	a	_	DET	_	_	7	det	_	_
7	celebrity	_	NOUN	_	_	9	nmod:poss	_	_
8	's	_	PART	_	_	7	case	_	_
9	name	_	NOUN	_	_	13	nsubj	_	_
10	is	_	AUX	_	_	13	cop	_	_
11	initially	_	ADV	_	_	13	advmod	_	_
12	quite	_	ADV	_	_	13	advmod	_	_
13	rare	_	ADJ	_	_	2	advcl	_	_
14	.	_	PUNCT	_	_	2	punct	_	_



# text = This:<PRON> has:<AUX> not:<PART> stopped:<VERB> investors:<NOUN> flocking:<VERB> to:<PART> put:<VERB> their:<PRON> money:<NOUN> in:<ADP> the:<DET> funds:<NOUN> .:<PUNCT>
# analyses = 565
# parsetree = (Utt (Utt (QS (IP This) (do has) (neg not) (VP (V2V stopped) (NP (CN (N investors))) (VP (VV flocking) (VP_to (to to) (VP (V2 put) (NP (NP (NP_poss (Pron_poss their)) (CN (N money))) (NP_obl (Prep in) (NP (Det the) (CN (N funds))))))))))) (Punct '.'))
1	This	_	PRON	_	_	4	nsubj	_	_
2	has	_	AUX	_	_	4	aux	_	_
3	not	_	ADV	_	_	4	advmod	_	_
4	stopped	_	VERB	_	_	0	root	_	_
5	investors	_	NOUN	_	_	4	obj	_	_
6	flocking	_	VERB	_	_	4	xcomp	_	_
7	to	_	PART	_	_	8	mark	_	_
8	put	_	VERB	_	_	6	xcomp	_	_
9	their	_	PRON	_	_	10	nmod:poss	_	_
10	money	_	NOUN	_	_	8	obj	_	_
11	in	_	ADP	_	_	13	case	_	_
12	the	_	DET	_	_	13	det	_	_
13	funds	_	NOUN	_	_	10	nmod	_	_
14	.	_	PUNCT	_	_	4	punct	_	_



# text = This:<DET> discordance:<NOUN> between:<ADP> economic:<ADJ> data:<NOUN> and:<CCONJ> political:<ADJ> rhetoric:<NOUN> is:<AUX> familiar:<ADJ> ,:<PUNCT> or:<CCONJ> should:<AUX> be:<VERB> .:<PUNCT>
# analyses = 0
# parsetree = (Chunks (S_front (S (NP (NP (Det This) (CN (N discordance))) (NP_obl (Prep between) (NP (ListNP (NP (CN (AP (A economic)) (CN (N data))))) (NP_conj (Conj and) (NP (CN (AP (A political)) (CN (N rhetoric)))))))) (cop is) (Comp (AP (A familiar)))) (comma ',')) (Utt (Utt (Conj or) (Utt (Imp (do should) (VP (V be))))) (Punct '.')))
1	This	_	DET	_	_	2	det	_	_
2	discordance	_	NOUN	_	_	10	nsubj	_	_
3	between	_	ADP	_	_	5	case	_	_
4	economic	_	ADJ	_	_	5	amod	_	_
5	data	_	NOUN	_	_	2	nmod	_	_
6	and	_	CCONJ	_	_	8	cc	_	_
7	political	_	ADJ	_	_	8	amod	_	_
8	rhetoric	_	NOUN	_	_	5	conj	_	_
9	is	_	AUX	_	_	10	cop	_	_
10	familiar	_	ADJ	_	_	14	dep	_	_
11	,	_	PUNCT	_	_	10	punct	_	_
12	or	_	CCONJ	_	_	14	cc	_	_
13	should	_	AUX	_	_	14	aux	_	_
14	be	_	VERB	_	_	0	root	_	_
15	.	_	PUNCT	_	_	14	punct	_	_



# text = The:<DET> feasibility:<NOUN> study:<ADV> estimates:<VERB> that:<SCONJ> it:<PRON> would:<AUX> take:<VERB> passengers:<NOUN> about:<ADP> four:<NUM> minutes:<NOUN> to:<PART> cross:<VERB> the:<DET> Potomac:<ADJ> River:<NOUN> on:<ADP> the:<DET> gondola:<NOUN> .:<PUNCT>
# analyses = 37936
# parsetree = (Utt (Utt (S (NP (Det The) (CN (N feasibility))) (VP (AdV study) (VP (VS estimates) (S_that (that that) (S (NP (Pron it)) (have would) (VP (V2 take) (NP (NP (CN (N passengers))) (NP_obl (Prep about) (NP (NP (Num (Card four)) (NP (NP (CN (N minutes))) (SC (VP_to (to to) (VP (V2 cross) (NP (Det the) (CN (AP (A Potomac)) (CN (N River))))))))) (NP_obl (Prep on) (NP (Det the) (CN (N gondola)))))))))))))) (Punct '.'))
1	The	_	DET	_	_	2	det	_	_
2	feasibility	_	NOUN	_	_	4	nsubj	_	_
3	study	_	ADV	_	_	4	advmod	_	_
4	estimates	_	VERB	_	_	0	root	_	_
5	that	_	SCONJ	_	_	8	mark	_	_
6	it	_	PRON	_	_	8	nsubj	_	_
7	would	_	AUX	_	_	8	aux	_	_
8	take	_	VERB	_	_	4	ccomp	_	_
9	passengers	_	NOUN	_	_	8	obj	_	_
10	about	_	ADP	_	_	12	case	_	_
11	four	_	NUM	_	_	12	nummod	_	_
12	minutes	_	NOUN	_	_	9	nmod	_	_
13	to	_	PART	_	_	14	mark	_	_
14	cross	_	VERB	_	_	12	acl	_	_
15	the	_	DET	_	_	17	det	_	_
16	Potomac	_	ADJ	_	_	17	amod	_	_
17	River	_	NOUN	_	_	14	obj	_	_
18	on	_	ADP	_	_	20	case	_	_
19	the	_	DET	_	_	20	det	_	_
20	gondola	_	NOUN	_	_	12	nmod	_	_
21	.	_	PUNCT	_	_	4	punct	_	_



# text = he:<PRON> collected:<VERB> cards:<NOUN> and:<CCONJ> traded:<VERB> them:<PRON> with:<ADP> the:<DET> other:<ADJ> boys:<NOUN>
# analyses = 10
# parsetree = (Utt (QS (IP he) (VP (ListVP (VP (V2 collected) (NP (CN (N cards))))) (VP_conj (Conj and) (VP (V2 traded) (NP (NP (Pron them)) (NP_obl (Prep with) (NP (Det the) (CN (AP (A other)) (CN (N boys)))))))))))
1	he	_	PRON	_	_	2	nsubj	_	_
2	collected	_	VERB	_	_	0	root	_	_
3	cards	_	NOUN	_	_	2	obj	_	_
4	and	_	CCONJ	_	_	5	cc	_	_
5	traded	_	VERB	_	_	2	conj	_	_
6	them	_	PRON	_	_	5	obj	_	_
7	with	_	ADP	_	_	10	case	_	_
8	the	_	DET	_	_	10	det	_	_
9	other	_	ADJ	_	_	10	amod	_	_
10	boys	_	NOUN	_	_	6	nmod	_	_



# text = this:<DET> crime:<NOUN> carries:<NOUN> a:<DET> penalty:<NOUN> of:<ADP> five:<NUM> years:<NOUN> in:<ADP> prison:<NOUN>
# analyses = 0
# parsetree = (Chunks (Comp (NP (Det this) (CN (N (N_one crime) (N carries))))) (Comp (NP (NP (Det a) (CN (N penalty))) (NP_obl (Prep of) (NP (NP (Num (Card five)) (NP (CN (N years)))) (NP_obl (Prep in) (NP (CN (N prison)))))))))
1	this	_	DET	_	_	3	det	_	_
2	crime	_	NOUN	_	_	3	compound	_	_
3	carries	_	NOUN	_	_	5	dep	_	_
4	a	_	DET	_	_	5	det	_	_
5	penalty	_	NOUN	_	_	0	root	_	_
6	of	_	ADP	_	_	8	case	_	_
7	five	_	NUM	_	_	8	nummod	_	_
8	years	_	NOUN	_	_	5	nmod	_	_
9	in	_	ADP	_	_	10	case	_	_
10	prison	_	NOUN	_	_	8	nmod	_	_



# text = the:<DET> news:<NOUN> was:<AUX> carried:<VERB> to:<ADP> every:<DET> village:<NOUN> in:<ADP> the:<DET> province:<NOUN>
# analyses = 62
# parsetree = (Utt (S (NP (Det the) (CN (N news))) (have was) (VP (V2 carried) (NP_obl (Prep to) (NP (NP (Det every) (CN (N village))) (NP_obl (Prep in) (NP (Det the) (CN (N province)))))))))
1	the	_	DET	_	_	2	det	_	_
2	news	_	NOUN	_	_	4	nsubj	_	_
3	was	_	AUX	_	_	4	aux	_	_
4	carried	_	VERB	_	_	0	root	_	_
5	to	_	ADP	_	_	7	case	_	_
6	every	_	DET	_	_	7	det	_	_
7	village	_	NOUN	_	_	4	obl	_	_
8	in	_	ADP	_	_	10	case	_	_
9	the	_	DET	_	_	10	det	_	_
10	province	_	NOUN	_	_	7	nmod	_	_



# text = I:<PRON> carry:<VERB> these:<DET> thoughts:<NOUN> in:<ADP> the:<DET> back:<NOUN> of:<ADP> my:<PRON> head:<NOUN>
# analyses = 48
# parsetree = (Utt (S (there I) (be_V carry) (NP (NP (Det these) (CN (N thoughts))) (NP_obl (Prep in) (NP (NP (Det the) (CN (N back))) (NP_obl (Prep of) (NP (NP_poss (Pron_poss my)) (CN (N head)))))))))
1	I	_	PRON	_	_	2	expl	_	_
2	carry	_	VERB	_	_	0	root	_	_
3	these	_	DET	_	_	4	det	_	_
4	thoughts	_	NOUN	_	_	2	nsubj	_	_
5	in	_	ADP	_	_	7	case	_	_
6	the	_	DET	_	_	7	det	_	_
7	back	_	NOUN	_	_	4	nmod	_	_
8	of	_	ADP	_	_	10	case	_	_
9	my	_	PRON	_	_	10	nmod:poss	_	_
10	head	_	NOUN	_	_	7	nmod	_	_



# text = Adam:<PROPN> would:<AUX> have:<AUX> been:<AUX> carried:<VERB> over:<ADV> into:<ADP> the:<DET> life:<NOUN> eternal:<NOUN>
# analyses = 9
# parsetree = (Utt (S (NP (PN Adam)) (aux would) (have have) (cop been) (VP_pass (VP_pass (VP_pass (V2 carried)) (Adv over)) (NP_obl (Prep into) (NP (Det the) (CN (N (N_one life) (N eternal))))))))
1	Adam	_	PROPN	_	_	5	nsubj:pass	_	_
2	would	_	AUX	_	_	5	aux	_	_
3	have	_	AUX	_	_	5	aux	_	_
4	been	_	AUX	_	_	5	aux:pass	_	_
5	carried	_	VERB	_	_	0	root	_	_
6	over	_	ADV	_	_	5	advmod	_	_
7	into	_	ADP	_	_	10	case	_	_
8	the	_	DET	_	_	10	det	_	_
9	life	_	NOUN	_	_	10	compound	_	_
10	eternal	_	NOUN	_	_	5	nmod	_	_



# text = the:<DET> casings:<NOUN> had:<AUX> rotted:<VERB> away:<ADV> and:<CCONJ> had:<AUX> to:<PART> be:<AUX> replaced:<VERB>
# analyses = 9
# parsetree = (Utt (S (NP (NP (NP (Det the)) (SC (S_that (S (NP (CN (N casings))) (have had) (VP (ListVP (VP (VP (V rotted)) (Adv away))) (VP_conj (Conj and) (VP (aux had)))))))) (SC (VP_to (to to) (VP (aux be))))) (VP (V replaced))))
1	the	_	DET	_	_	10	nsubj	_	_
2	casings	_	NOUN	_	_	4	nsubj	_	_
3	had	_	AUX	_	_	4	aux	_	_
4	rotted	_	VERB	_	_	1	acl	_	_
5	away	_	ADV	_	_	4	advmod	_	_
6	and	_	CCONJ	_	_	7	cc	_	_
7	had	_	AUX	_	_	4	conj	_	_
8	to	_	PART	_	_	9	mark	_	_
9	be	_	AUX	_	_	1	acl	_	_
10	replaced	_	VERB	_	_	0	root	_	_



# text = she:<PRON> was:<AUX> incensed:<VERB> that:<SCONJ> this:<DET> chit:<NOUN> of:<ADP> a:<DE> girl:<NOUN> should:<AUX> dare:<AUX> to:<PART> make:<VERB> a:<DE> fool:<NOUN> of:<ADP> her:<PRON> in:<ADP> front:<NOUN> of:<ADP> the:<DET> class:<NOUN>
# analyses = 2970
# parsetree = (Utt (S (NP (Pron she)) (have was) (VP (VS incensed) (S_that (that that) (S (NP (NP (Det this)) (RS (NP (NP (CN (N chit))) (NP_obl (Prep of) (NP (NP (Det a)) (SC (S_that (S (NP (CN (N girl))) (VP (aux should)))))))) (VPSlash (VP (aux dare)) (Prep to)))) (VP (V2 make) (NP (NP (Det a) (CN (N fool))) (NP_obl (Prep of) (NP (NP (Pron her)) (NP_obl (Prep in) (NP (NP (CN (N front))) (NP_obl (Prep of) (NP (Det the) (CN (N class)))))))))))))))
1	she	_	PRON	_	_	3	nsubj	_	_
2	was	_	AUX	_	_	3	aux	_	_
3	incensed	_	VERB	_	_	0	root	_	_
4	that	_	SCONJ	_	_	13	mark	_	_
5	this	_	DET	_	_	13	nsubj	_	_
6	chit	_	NOUN	_	_	11	nsubj	_	_
7	of	_	ADP	_	_	8	case	_	_
8	a	_	DET	_	_	6	nmod	_	_
9	girl	_	NOUN	_	_	10	nsubj	_	_
10	should	_	AUX	_	_	8	acl	_	_
11	dare	_	AUX	_	_	5	acl:relcl	_	_
12	to	_	ADP	_	_	11	case	_	_
13	make	_	VERB	_	_	3	ccomp	_	_
14	a	_	DET	_	_	15	det	_	_
15	fool	_	NOUN	_	_	13	obj	_	_
16	of	_	ADP	_	_	17	case	_	_
17	her	_	PRON	_	_	15	nmod	_	_
18	in	_	ADP	_	_	19	case	_	_
19	front	_	NOUN	_	_	17	nmod	_	_
20	of	_	ADP	_	_	22	case	_	_
21	the	_	DET	_	_	22	det	_	_
22	class	_	NOUN	_	_	19	nmod	_	_



# text = the:<DET> landslide:<NOUN> he:<PRON> had:<VERB> in:<ADP> the:<DET> electoral:<ADJ> college:<NOUN> obscured:<VERB> the:<DET> narrowness:<NOUN> of:<ADP> a:<DE> victory:<NOUN> based:<VERB> on:<ADP> just:<ADJ> 43:<NUM> %:<SYM> of:<ADP> the:<DET> popular:<ADJ> vote:<NOUN>
# analyses = 0
# parsetree = (Chunks (Comp (NP (NP (NP (Det the) (CN (N landslide))) (SC (S_that (S (NP (Pron he)) (VP (V had)))))) (NP_obl (Prep in) (NP (NP (Det the)) (SC (S_that (S (NP (CN (AP (A electoral)) (CN (N college)))) (VP (V2C obscured) (NP (NP (Det the) (CN (N narrowness))) (NP_obl (Prep of) (NP (NP (Det a)) (RS (NP (CN (N victory))) (VPSlash (VP (V based)) (Prep on)))))) (AP (A just)))))))))) (Card '43') (Symb '%') (Comp (NP_obl (Prep of) (NP (Det the) (CN (AP (A popular)) (CN (N vote)))))))
1	the	_	DET	_	_	2	det	_	_
2	landslide	_	NOUN	_	_	23	dep	_	_
3	he	_	PRON	_	_	4	nsubj	_	_
4	had	_	VERB	_	_	2	acl	_	_
5	in	_	ADP	_	_	6	case	_	_
6	the	_	DET	_	_	2	nmod	_	_
7	electoral	_	ADJ	_	_	8	amod	_	_
8	college	_	NOUN	_	_	9	nsubj	_	_
9	obscured	_	VERB	_	_	6	acl	_	_
10	the	_	DET	_	_	11	det	_	_
11	narrowness	_	NOUN	_	_	9	obj	_	_
12	of	_	ADP	_	_	13	case	_	_
13	a	_	DET	_	_	11	nmod	_	_
14	victory	_	NOUN	_	_	15	nsubj	_	_
15	based	_	VERB	_	_	13	acl:relcl	_	_
16	on	_	ADP	_	_	15	case	_	_
17	just	_	ADJ	_	_	9	xcomp	_	_
18	43	_	NUM	_	_	23	dep	_	_
19	%	_	SYM	_	_	23	dep	_	_
20	of	_	ADP	_	_	23	case	_	_
21	the	_	DET	_	_	23	det	_	_
22	popular	_	ADJ	_	_	23	amod	_	_
23	vote	_	NOUN	_	_	0	root	_	_



# text = United:<PROPN> States:<PROPN> troops:<NOUN> now:<ADV> carry:<NOUN> atropine:<NOUN> and:<CCONJ> autoinjectors:<NOUN> in:<ADP> their:<PRON> first:<ADJ> -:<PUNCT> aid:<NOUN> kits:<NOUN> to:<PART> use:<VERB> in:<ADP> case:<NOUN> of:<ADP> organophosphate:<ADJ> nerve:<NOUN> agent:<NOUN> poisoning:<VERB>
# analyses = 0
# parsetree = (Chunks (Comp (Comp (NP (CN (N (PN United) (CN (N (PN States) (CN (N troops)))))))) (Adv now)) (Comp (NP (NP (ListNP (NP (CN (N (N_one carry) (N atropine))))) (NP_conj (Conj and) (NP (CN (N autoinjectors))))) (NP_obl (Prep in) (NP (Pron their))))) (Utt (Utt (AP (A first))) (Punct '-')) (Comp (NP (NP (NP (CN (N (N_one aid) (N kits)))) (SC (VP_to (to to) (VP (V use))))) (NP_obl (Prep in) (NP (NP (CN (N case))) (NP_obl (Prep of) (NP (NP (CN (AP (A organophosphate)) (CN (N nerve)))) (SC (S_that (S (NP (CN (N agent))) (VP (V poisoning))))))))))))
1	United	_	PROPN	_	_	3	compound	_	_
2	States	_	PROPN	_	_	3	compound	_	_
3	troops	_	NOUN	_	_	14	dep	_	_
4	now	_	ADV	_	_	3	advmod	_	_
5	carry	_	NOUN	_	_	6	compound	_	_
6	atropine	_	NOUN	_	_	14	dep	_	_
7	and	_	CCONJ	_	_	8	cc	_	_
8	autoinjectors	_	NOUN	_	_	6	conj	_	_
9	in	_	ADP	_	_	10	case	_	_
10	their	_	PRON	_	_	6	nmod	_	_
11	first	_	ADJ	_	_	14	dep	_	_
12	-	_	PUNCT	_	_	11	punct	_	_
13	aid	_	NOUN	_	_	14	compound	_	_
14	kits	_	NOUN	_	_	0	root	_	_
15	to	_	PART	_	_	16	mark	_	_
16	use	_	VERB	_	_	14	acl	_	_
17	in	_	ADP	_	_	18	case	_	_
18	case	_	NOUN	_	_	14	nmod	_	_
19	of	_	ADP	_	_	21	case	_	_
20	organophosphate	_	ADJ	_	_	21	amod	_	_
21	nerve	_	NOUN	_	_	18	nmod	_	_
22	agent	_	NOUN	_	_	23	nsubj	_	_
23	poisoning	_	VERB	_	_	21	acl	_	_



# text = he:<PRON> may:<AUX> accomplish:<VERB> by:<ADP> craft:<NOUN> in:<ADP> the:<DET> long:<ADJ> run:<NOUN> what:<PRON> he:<PRON> can:<AUX> not:<PART> do:<VERB> by:<ADP> force:<NOUN> and:<CCONJ> violence:<NOUN> in:<ADP> the:<DET> short:<ADJ> one:<PRON>
# analyses = 0
# parsetree = (Chunks (ListS (S (NP (Pron he)) (have may) (VP (V2 accomplish) (NP_obl (Prep by) (NP (NP (CN (N craft))) (NP_obl (Prep in) (NP (NP (NP (Det the) (CN (AP (A long)) (CN (N run)))) (SC (QS (IP what) (NP (Pron he)) (aux can) (neg not) (VPSlash (V2 do))))) (NP_obl (Prep by) (NP (NP (ListNP (NP (CN (N force)))) (NP_conj (Conj and) (NP (CN (N violence))))) (NP_obl (Prep in) (NP (Det the)))))))))))) (A short) (Comp (NP (Pron one))))
1	he	_	PRON	_	_	3	nsubj	_	_
2	may	_	AUX	_	_	3	aux	_	_
3	accomplish	_	VERB	_	_	22	dep	_	_
4	by	_	ADP	_	_	5	case	_	_
5	craft	_	NOUN	_	_	3	obl	_	_
6	in	_	ADP	_	_	9	case	_	_
7	the	_	DET	_	_	9	det	_	_
8	long	_	ADJ	_	_	9	amod	_	_
9	run	_	NOUN	_	_	5	nmod	_	_
10	what	_	PRON	_	_	14	obj	_	_
11	he	_	PRON	_	_	14	nsubj	_	_
12	can	_	AUX	_	_	14	aux	_	_
13	not	_	ADV	_	_	14	advmod	_	_
14	do	_	VERB	_	_	9	acl	_	_
15	by	_	ADP	_	_	16	case	_	_
16	force	_	NOUN	_	_	9	nmod	_	_
17	and	_	CCONJ	_	_	18	cc	_	_
18	violence	_	NOUN	_	_	16	conj	_	_
19	in	_	ADP	_	_	20	case	_	_
20	the	_	DET	_	_	16	nmod	_	_
21	short	_	ADJ	_	_	22	dep	_	_
22	one	_	PRON	_	_	0	root	_	_



# text = it:<PRON> has:<AUX> been:<AUX> said:<VERB> that:<SCONJ> only:<ADV> a:<DE> hierarchical:<ADJ> society:<NOUN> with:<ADP> a:<DE> leisure:<ADJ> class:<NOUN> at:<ADP> the:<DET> top:<NOUN> can:<AUX> produce:<VERB> works:<NOUN> of:<ADP> art:<NOUN>
# analyses = 4743
# parsetree = (Utt (S (NP (Pron it)) (aux has) (have been) (VP (VS said) (S_that (that that) (S (NP (NP (Predet only) (NP (Det a) (CN (AP (A hierarchical)) (CN (N society))))) (NP_obl (Prep with) (NP (NP (Det a) (CN (AP (A leisure)) (CN (N class)))) (NP_obl (Prep at) (NP (NP (Det the)) (SC (S_that (S (NP (CN (N top))) (VP (aux can)))))))))) (VP (V2 produce) (NP (NP (CN (N works))) (NP_obl (Prep of) (NP (CN (N art)))))))))))
1	it	_	PRON	_	_	4	nsubj	_	_
2	has	_	AUX	_	_	4	aux	_	_
3	been	_	AUX	_	_	4	aux	_	_
4	said	_	VERB	_	_	0	root	_	_
5	that	_	SCONJ	_	_	18	mark	_	_
6	only	_	ADV	_	_	9	det:predet	_	_
7	a	_	DET	_	_	9	det	_	_
8	hierarchical	_	ADJ	_	_	9	amod	_	_
9	society	_	NOUN	_	_	18	nsubj	_	_
10	with	_	ADP	_	_	13	case	_	_
11	a	_	DET	_	_	13	det	_	_
12	leisure	_	ADJ	_	_	13	amod	_	_
13	class	_	NOUN	_	_	9	nmod	_	_
14	at	_	ADP	_	_	15	case	_	_
15	the	_	DET	_	_	13	nmod	_	_
16	top	_	NOUN	_	_	17	nsubj	_	_
17	can	_	AUX	_	_	15	acl	_	_
18	produce	_	VERB	_	_	4	ccomp	_	_
19	works	_	NOUN	_	_	18	obj	_	_
20	of	_	ADP	_	_	21	case	_	_
21	art	_	NOUN	_	_	19	nmod	_	_



# text = his:<PRON> ingenuous:<ADJ> explanation:<NOUN> that:<SCONJ> he:<PRON> would:<AUX> not:<PART> have:<AUX> burned:<VERB> the:<DET> church:<NOUN> if:<SCONJ> he:<PRON> had:<AUX> not:<PART> thought:<VERB> the:<DET> bishop:<NOUN> was:<AUX> in:<ADP> it:<PRON>
# analyses = 454775
# parsetree = (Utt (S (NP (NP (NP_poss (Pron_poss his)) (CN (AP (A ingenuous)) (CN (N explanation)))) (SC (S_that (that that) (S (NP (Pron he)) (do would) (neg not) (VP (aux have)))))) (VP (V2 burned) (NP (NP (NP (Det the)) (SC (S_that (S (NP (NP (CN (N church))) (SC (S_that (that if) (S (NP (Pron he)) (do had) (neg not) (VP (V2 thought) (NP (Det the) (CN (N bishop)))))))) (VP (aux was)))))) (NP_obl (Prep in) (NP (Pron it)))))))
1	his	_	PRON	_	_	3	nmod:poss	_	_
2	ingenuous	_	ADJ	_	_	3	amod	_	_
3	explanation	_	NOUN	_	_	9	nsubj	_	_
4	that	_	SCONJ	_	_	8	mark	_	_
5	he	_	PRON	_	_	8	nsubj	_	_
6	would	_	AUX	_	_	8	aux	_	_
7	not	_	ADV	_	_	8	advmod	_	_
8	have	_	AUX	_	_	3	acl	_	_
9	burned	_	VERB	_	_	0	root	_	_
10	the	_	DET	_	_	9	obj	_	_
11	church	_	NOUN	_	_	19	nsubj	_	_
12	if	_	SCONJ	_	_	16	mark	_	_
13	he	_	PRON	_	_	16	nsubj	_	_
14	had	_	AUX	_	_	16	aux	_	_
15	not	_	ADV	_	_	16	advmod	_	_
16	thought	_	VERB	_	_	11	acl	_	_
17	the	_	DET	_	_	18	det	_	_
18	bishop	_	NOUN	_	_	16	obj	_	_
19	was	_	AUX	_	_	10	acl	_	_
20	in	_	ADP	_	_	21	case	_	_
21	it	_	PRON	_	_	10	nmod	_	_



