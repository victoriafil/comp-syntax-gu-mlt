-- utterances and sentences
Utt ::= Utt Punct        # head punct
Utt ::= Conj Utt         # cc head
Utt ::= NP_obl comma Utt # cc punct head
Utt ::= parenth Utt parenth # punct head punct

Utt ::= S
Utt ::= QS
Utt ::= Imp
Utt ::= NP
Utt ::= AP
Utt ::= IP
Utt ::= IAdv
Utt ::= Num

-- sentences
S ::= NP VP # nsubj head
S ::= NP neg VP neg? Adv  # nsubj advmod head advmod advmod
S ::= NP neg? avoir Adv? VP  # nsubj advmod aux advmod head
S ::= NP aux neg? avoir? VP  # nsubj aux advmod aux head

S ::= NP cop AdV? neg? Comp # nsubj cop advmod advmod head
S ::= NP avoir AdV? neg? cop Comp # nsubj aux advmod advmod cop head
S ::= NP aux AdV?  neg? avoir? cop Comp # nsubj aux advmod advmod aux cop head

S ::= NP cop AdV? neg? VP_pass # nsubj:pass aux:pass advmod advmod head
S ::= NP avoir AdV? neg? cop VP_pass # nsubj:pass aux advmod advmod aux:pass head
S ::= NP aux AdV? neg? avoir? cop VP_pass # nsubj:pass aux advmod advmod aux aux:pass head

S ::= it cop AdV? neg? AP # expl cop advmod advmod head

S ::= NP être_V neg? SC # nsubj head advmod ccomp
S ::= NP avoir neg? être_V SC # nsubj aux advmod head ccomp
S ::= NP aux neg? avoir? être_V SC # nsubj aux advmod aux head ccomp

S ::= SC VP # csubj head
S ::= SC faire neg VP # csubj aux advmod head
S ::= SC cop neg? VP_pass # csubj:pass aux:pass advmod head
S ::= SC avoir neg? cop VP_pass # csubj:pass aux advmod aux:pass head
S ::= S_front NP VS # parataxis nsubj head

QS ::= faire NP neg? VP # aux nsubj advmod head
QS ::= aux NP neg? avoir? VP # aux nsubj advmod aux head
QS ::= cop NP neg? Comp # cop nsubj advmod head
QS ::= cop neg NP Comp # cop advmod nsubj head

QS ::= cop NP neg? VP_pass # aux:pass nsubj:pass advmod head
QS ::= avoir NP neg? cop VP_pass # aux nsubj:pass advmod aux:pass head
QS ::= aux NP neg? avoir? cop VP_pass # aux nsubj:pass advmod aux:pass aux head

QS ::= IP VP # nsubj head
QS ::= IP aux # head aux
QS ::= IP aux neg? avoir? VP # nsubj aux advmod aux head
QS ::= IP cop neg? Comp # nsubj cop advmod head
QS ::= IP aux neg? avoir? cop Comp # nsubj cop advmod aux head
QS ::= IP do NP neg? VPSlash # obj aux nsubj advmod head
QS ::= IP aux NP neg? avoir? VPSlash # obj aux nsubj advmod aux head

QS ::= IP cop neg? VP_pass # nsubj:pass aux:pass advmod head
QS ::= IP avoir neg? cop VP_pass # nsubj:pass aux advmod aux:pass head
QS ::= IP aux neg? have? cop VP_pass # nsubj:pass aux advmod aux:pass aux head

QS ::= IAdv do NP neg? VP # advmod aux nsubj advmod head
QS ::= IAdv aux NP neg? have? VP # advmod aux nsubj advmod aux head
QS ::= IAdv cop NP neg? Comp # advmod cop nsubj advmod head
QS ::= IAdv cop neg NP Comp # advmod cop nsubj advmod head

QS ::= IAdv cop NP neg? VP_pass # advmod aux:pass nsubj:pass advmod head

-- indirect questions
QS ::= if S # mark head
QS ::= IP NP does? neg? VPSlash # obj nsubj nsubj advmod head
QS ::= IP NP aux neg? avoir? VPSlash # obj nsubj aux advmod aux head
QS ::= IAdv NP do? neg? VP # advmod nsubj aux advmod head
QS ::= IAdv NP aux neg? have? VP # advmod nsubj aux advmod aux head
QS ::= IAdv NP? cop neg? Comp # advmod nsubj cop advmod head

RS ::= RP VP # nsubj head
RS ::= RP ne? do pas VP # nsubj advmod aux advmod head
RS ::= RP ne? avoir pas? VP # nsubj advmod aux advmod head
RS ::= RP ne? cop pas? Comp # nsubj advmod cop advmod head
RS ::= RP ne? avoir pas? cop Comp # nsubj advmod aux advmod cop head

RS ::= RP NP VPSlash # obj nsubj head
RS ::= RP NP ne? faire pas? VPSlash # obj nsubj advmod aux advmod head
RS ::= NP VPSlash # nsubj head
RS ::= NP faire pas VPSlash # nsubj aux advmod head

-- imperatives
Imp ::= do? neg? VP # aux advmod head
Imp ::= do? neg? cop Comp # aux advmod cop head

-- sentences with adverbials
S  ::= S_subcomma S # advcl head
S  ::= S S_sub # head advcl
S  ::= Adv_comma S # advmod head
S  ::= NP_oblcomma S # nmod head

-- embedded sentences
SC ::= S_that
SC ::= QS
SC ::= VP_to


VP ::= V
VP ::= aux # # 0.001
VP ::= NP VP VP # nsubj head xcomp 
VP ::= VP VP # head ccomp 
VP ::= VP VP NP # head xcomp nsubj
VP ::= V2 NP  # head obj
VP ::= V2 NP_obl # head obl
VP ::= V3 NP NP # head iobj obj
VP ::= V2C NP NP # head obj xcomp
VP ::= V2C NP AP # head obj xcomp
VP ::= VS S_that # head ccomp
VP ::= VV VP_to # head xcomp
VP ::= V2V NP VP # head obj xcomp
VP ::= V2V NP VP_to # head obj xcomp
VP ::= VP comma? Adv # head punct advmod
VP ::= AdV VP # advmod head
VP ::= AdV VP AdV # advmod head advmod
VP ::= VP NP_obl # head obl # 0.001
VP ::= VS S_direct # head parataxis

VP_pass ::= V2
VP_pass ::= V2:pass
VP_pass ::= VP_pass Adv # head advmod
VP_pass ::= VP_pass NP_obl # head nmod

VPSlash ::= V2
VPSlash ::= VPSlash NP_obl  # head obl # 0.001
VPSlash ::= VPSlash Adv # head advmod
VPSlash ::= VP Prep # head case # 0.001

S_that ::= que? S # mark head

S_direct ::= colon S # punct head
S_direct ::= colon quote S quote # punct punct head punct
S_front  ::= S comma? # head punct
S_front  ::= quote S quote comma # punct head punct punct

Comp ::= AP
Comp ::= NP SC # nsubj head
Comp ::= NP
Comp ::= Adv
Comp ::= NP_obl
Comp ::= Comp comma? NP_obl # head punct nmod
Comp ::= Comp comma? Adv # head punct advmod

-- VP with to
VP_to ::= neg? to VP # advmod mark head
VP_to ::= neg? to cop Comp # advmod mark cop head

-- oblique noun phrase
NP_obl ::= Prep NP # case head
NP_obl ::= Prep NP AP # case head amod

-- noun phrases
NP ::= PN
NP ::= Pron
NP ::= Num # # 0.1
NP ::= Det # # 0.1

NP ::= Det? CN # det head
NP ::= Det N # det head
NP ::= NP comma? NP_obl # head punct nmod
NP ::= Predet NP # det:predet head
NP ::= NP_poss CN # nmod:poss head
NP ::= Num NP # nummod head
NP ::= N PN # head flat
NP ::= NP SC # head acl
NP ::= NP comma? S_sub # head punct acl
NP ::= NP comma? RS # head punct acl:relcl
NP ::= Symb Num # head nummod
NP ::= NP comma? VP_pass # head punct acl # 0.01
NP ::= CN NP_obl # amod head

NP_poss ::= Pron_poss

-- some very special rules ---
NP        ::= Det CN_quoted # det head
CN_quoted ::= quote CN quote # punct head punct
NP        ::= NP NP_appos # head appos # 0.01
NP_appos  ::= Punct_appos NP # punct head

Num ::= Card
Num ::= Digits

CN ::= N
CN ::= CN AP # head amod
CN ::= AP CN # amod head
CN ::= AP CN comma? # amod head punct # 0.01

PN ::= PN_one PN # head flat

N ::= N_one N # compound head
N ::= PN CN # compound head

Card ::= Card_one Card # compound head

IP ::= IDet CN # det head
IP ::= IDet CN AP # det head amod

-- adjectival phrases
AP ::= A
AP ::= AdA AP     # advmod head

-- adverbials
-- Adv ::= Prep NP # case head

S_sub       ::= comma? Subj S # punct mark head
S_subcomma  ::= Subj S comma? # mark head punct
Adv_comma   ::= Adv comma? # head punct
NP_oblcomma ::= NP_obl comma? # head punct
S_sub       ::= comma? Subj VP # punct mark head # 0.1
S_subcomma  ::= Subj VP comma? # mark head punct # 0.1

-- coordination
S       ::= Conj_pre? ListS S_conj # cc:preconj head conj
ListS   ::= S
ListS   ::= ListS S_comma # head conj
S_conj  ::= comma? Conj S # punct cc head
S_comma ::= comma S # punct head

NP       ::= Conj_pre? ListNP NP_conj # cc:preconj head conj
ListNP   ::= NP
ListNP   ::= ListNP NP_comma # head conj
NP_conj  ::= comma? Conj NP # punct cc head
NP_comma ::= comma NP # punct head

AP       ::= Conj_pre? ListAP AP_conj # cc:preconj head conj
ListAP   ::= AP
ListAP   ::= ListAP AP_comma # head conj
AP_conj  ::= comma? Conj AP # punct cc head
AP_comma ::= comma AP # punct head

VP       ::= Conj_pre? ListVP VP_conj # cc:preconj head conj
ListVP   ::= VP
ListVP   ::= ListVP VP_comma # head conj
VP_conj  ::= comma? Conj VP # punct cc head
VP_comma ::= comma VP # punct head

-- in Adv conjunctions, we want to include NP_obl parts: all that matters for UD is the category of the first conjunct
Adv       ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv   ::= Adv
ListAdv   ::= ListAdv Adv_comma # head conj
Adv_conj  ::= comma? Conj Adv # punct cc head
Adv_conj  ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl     ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj


-- POS tag configurations
#pos AUX cop do have aux
#pos VERB V V2 V3 VS VV V2V V2C être_V
#pos NOUN N N_one
#pos ADJ A
#pos PROPN PN PN_one
#pos ADV Adv IAdv AdA AdV Predet neg
#pos SCONJ Subj that if
#pos CCONJ Conj Conj_pre
#pos DET Det IDet
#pos PRON Pron IP RP Pron_poss there it
#pos PART to 's
#pos PUNCT Punct Punct_appos comma quote colon parenth
#pos NUM Card Digits Card_one
#pos ADP Prep
#pos SYM Symb

-- structural word lexicon: normal categories
#token Prep à de avec d' pour dans en vers entre devant sur par
#token IP qui que lequel on
#token IAdv quand où parceque
#token AdA très trop
#token AdV certainement toujours jamais
#token Det un une le la autre chaque quelques
#token Pron je moi tu toi il lui elle nous vous ils elles
#token Subj si quand mais parceque
#token aux aurait avait a est ont été étre étais était
#token Punct . ! ?
#token Punct_appos , :
#token Conj et ou mais
#token Conj_pre both soit ni
#token IDet quel quelle
#token Pron_poss mon ma ton ta son sa mes tes ses notre votre leur nos vos leurs
#token RP that qui
#token Card cinq

-- structural word lexicon: syncategorematic words
#token cop être suis es est sommes es été
#token être_V être suis es est sommes es été
#token do faire fait fais
#token avoir avoir ai as a avons avez ont avais avait avions aviez avaient eu
#token neg ne pas
#token that que
#token to à
#token it il
#token if si
#token there là
#token comma ,
#token colon :
#token quote "
#token 's de
#token parenth ( ) [ ]

-- content word lexicon
#token PN John Mary Qui
#token V dort dormir dormi marcher marches marché chanter chantons chanté bouger bougez bougé passer passent passé leave leaves left run runs ran
#token V2 vois voir vu aimer aime aimé regarder regarde regardes donner donnons donné concerner concerne concerné reproduire reproduit decider décidé
#token V2 sais sait savons savez savent savais savait savions saviez savaient
#token V3 donne donnes donnons donnez donnent donnais donnait donnions donniez donnaient
#token V2C appeller appeles appelé considérer considère
#token V2V voir voit vu considérer considéres considérait arrêter arrête arrêté
#token VS dire dis dit croire croire
#token VV veux veut essayer essaies
#token A vieil vieille bon bonne curieux curieuse noir noire meilleur melleure froid froide modifié modifiée fatigué fatiguée mauvais mauvaise grand grande
#token N amour sommeil amours sommeils homme hommes femme femmes chat chats médecin bière monde éléphant chambre indice indicecs raison raisons perdant perdants film vie
#token N maison président lune Terre fille filles vin bière
#token Adv maintenant aujourd'hui ici avant là hier demain toujours
#token Predet probablement seul
#token Symb $